version: "3.4"

services:
  api: 
    image: tweetappbackend
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5001:80"
    depends_on:
      - db
      - kafka
    networks:
      - elastcinetwork
      - database

  
  db:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    ports:
      - "1435:1433"
    environment:
      SA_PASSWORD: "Testing123"
      ACCEPT_EULA: "Y"
    networks:
          database:
            aliases:
              - db

  react-ui:
    image: tweetappui:dev
    build:
      context: ./com.twwetapp.UI
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    container_name: react-ui
    stdin_open: true
    volumes:
       - ./com.twwetapp.UI:/usr/src/app/com.twwetapp.UI
       - /usr/src/app/com.twwetapp.UI/node_modules
    networks:
      - elastcinetwork

# ELK with kafka
  
  kibana:
    container_name: kib
    image: docker.elastic.co/kibana/kibana:8.4.1
    volumes:
      - "./kibana.yml:/usr/share/kibana/config/kibana.yml"
    ports:
      - 5601:5601
    links:
      - elasticsearch
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
        #ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - elastcinetwork

  elasticsearch:
    container_name: elasti
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.1
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/datafile
    environment:
      - xpack.monitoring.templates.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - discovery.type=single-node
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    
    networks:
      - elastcinetwork
        
  logstash:
    image: docker.elastic.co/logstash/logstash:8.4.1
    volumes:
      - "./logstash.conf:/config-dir/logstash.conf"
    restart: always
    command: logstash -f /config-dir/logstash.conf
    ports:
      - "9600:9600"
      - "7777:7777"
    links:
      - elasticsearch
      - kafka
    networks:
      - elastcinetwork
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - 2181:2181
    networks:
      - elastcinetwork

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9094:9094
    volumes:
      - ./data/kafka1/data:/var/lib/kafka/data
      - ./data/kafka1/etc:/etc/kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - elastcinetwork

  kafka-topics-generator:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: >
      bash -c
        "sleep 5s &&
        kafka-topics --create --topic=Tweet --if-not-exists --bootstrap-server=kafka:9092"

    networks:
      - elastcinetwork
        
  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:latest
  #   hostname: control-center
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     PORT: 9021
  #   networks:
  #     - elastcinetwork
networks:
  elastcinetwork:
    driver: bridge
  database:
    driver: bridge

volumes:
  elasticsearch-data:
  kibana.yml:
  logstash.conf: